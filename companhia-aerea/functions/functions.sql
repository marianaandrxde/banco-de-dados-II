    
    /* FUNÇÃO PARA VALIDAR CPF DE USUÁRIO*/
    
    CREATE OR REPLACE FUNCTION VALIDAR_CPF(CPF VARCHAR(11)) 
    RETURNS VOID AS 
    $$

    DECLARE
        CPF_ARRAY INT[] := STRING_TO_ARRAY(CPF, NULL);
        SOMA_DIGITO_1 INT := 0;
        SOMA_DIGITO_2 INT := 0;

    BEGIN
        IF LENGTH(CPF) != 11 THEN
            RAISE EXCEPTION 'CPF INVÁLIDO!';
        END IF;
        
        FOR INDICE IN 1..9 LOOP
            SOMA_DIGITO_1 := SOMA_DIGITO_1 + CPF_ARRAY[INDICE] * (11 - INDICE);
        END LOOP;
        
        SOMA_DIGITO_1 := 11 - (SOMA_DIGITO_1 % 11);
        
        IF SOMA_DIGITO_1 > 9 THEN
            SOMA_DIGITO_1 := 0;
        END IF;
            
        FOR INDICE IN 1..10 LOOP
            SOMA_DIGITO_2 := SOMA_DIGITO_2 + CPF_ARRAY[INDICE] * (12 - INDICE);
        END LOOP;
        
        SOMA_DIGITO_2 := 11 - (SOMA_DIGITO_2 % 11);
        
        IF SOMA_DIGITO_2 > 9 THEN
            SOMA_DIGITO_2 = 0;
        END IF;
        
        IF SOMA_DIGITO_1 != CPF_ARRAY[10] OR SOMA_DIGITO_2 != CPF_ARRAY[11] THEN
            RAISE EXCEPTION 'CPF INVÁLIDO. DÍGITOS VERIFICADORES INVÁLIDOS!';
        END IF;
        
        RAISE LOG 'CPF VÁLIDO!';
        
    END;

    $$ LANGUAGE 'plpgsql';


    /* FUNÇÃO PARA VALIDAR TELEFONE DE USUÁRIO */

    CREATE OR REPLACE FUNCTION VALIDAR_TELEFONE(_TELEFONE VARCHAR(11))
    RETURNS VOID
    AS $$
    BEGIN
        IF LENGTH(_TELEFONE) != 11 THEN
            RAISE EXCEPTION 'INVALID PHONE';
        END IF;
    END;
    $$
    LANGUAGE 'plpgsql';


    /* FUNÇÃO PARA VALIDAR EMAIL DE USUÁRIO */

    CREATE OR REPLACE FUNCTION VALIDAR_EMAIL(_EMAIL VARCHAR(100))
    RETURNS VOID
    AS $$
    BEGIN
        IF NOT _EMAIL ~ '^[a-zA-Z0-9.!#$%&''*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$' THEN
            RAISE EXCEPTION 'EMAIL INVALIDO. %', _EMAIL;
        END IF;
    END;
    $$ LANGUAGE 'plpgsql';


    /* FUNÇÃO PARA VALIDAR INTERVALO DE DATAS */

    CREATE OR REPLACE FUNCTION PRIVATE_VALIDAR_DATAS(_DATA_INICIAL DATE, _DATA_FINAL DATE) 
    RETURNS VOID AS $$
        BEGIN

            IF(_DATA_INICIAL IS NULL OR _DATA_FINAL IS NULL) THEN
                RAISE EXCEPTION 'AS DATAS NÃO PODEM SER VAZIAS';
            END IF;
            IF(_DATA_INICIAL < CURRENT_DATE OR _DATA_FINAL < CURRENT_DATE) THEN
                RAISE EXCEPTION 'AS DATAS NÃO PODEM SER INFERIORES A %', CURRENT_DATE;
            END IF;

            IF _DATA_FINAL < _DATA_INICIAL THEN
                RAISE EXCEPTION 'DATA FINAL NÃO PODE SER MENOR QUE A DATA INICIAL';
            END IF;


        END;

    $$ LANGUAGE 'plpgsql';
    

    /* FUNÇÃO PARA CADASTRAR USUÁRIO*/

    CREATE OR REPLACE FUNCTION CADASTRAR_USUARIO(
    _NOME VARCHAR(50), 
    _CPF VARCHAR(11), 
    _DT_NASC DATE, 
    _EMAIL VARCHAR(50), 
    _ENDERECO VARCHAR(100), 
    _TELEFONE VARCHAR(11)
    ) 
    RETURNS VOID AS $$
    BEGIN
        IF EXISTS (SELECT 1 FROM USUARIO WHERE CPF = _CPF) THEN
            RAISE EXCEPTION 'CPF % já cadastrado.', _CPF;
        END IF;

        IF EXISTS (SELECT 1 FROM USUARIO WHERE EMAIL = _EMAIL) THEN
            RAISE EXCEPTION 'E-mail % já cadastrado.', _EMAIL;
        END IF;

        INSERT INTO USUARIO (NOME, CPF, DT_NASC, EMAIL, ENDERECO, TELEFONE) 
        VALUES (_NOME, _CPF, _DT_NASC, _EMAIL, _ENDERECO, _TELEFONE);

        RAISE NOTICE 'Usuário % cadastrado com sucesso!', _NOME;
    END;
    $$ LANGUAGE plpgsql;
