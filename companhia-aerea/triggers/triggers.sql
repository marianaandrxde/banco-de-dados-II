    CREATE OR REPLACE FUNCTION T_VALIDACAO_USUARIO()
    RETURNS TRIGGER AS $$
    BEGIN
        IF NOT VALIDAR_EMAIL(NEW.EMAIL) THEN
            RAISE EXCEPTION 'E-mail % é inVálido.', NEW.EMAIL;
        END IF;

        IF NOT VALIDAR_TELEFONE(NEW.TELEFONE) THEN
            RAISE EXCEPTION 'Telefone % é inVálido.', NEW.TELEFONE;
        END IF;

        IF NOT VALIDAR_CPF(NEW.CPF) THEN
            RAISE EXCEPTION 'CPF % é inVálido.', NEW.CPF;
        END IF;

        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;

    CREATE OR REPLACE TRIGGER TRIGGER_VALIDACAO_USUARIO BEFORE INSERT OR UPDATE ON USUARIO FOR EACH ROW EXECUTE PROCEDURE T_VALIDACAO_USUARIO();

    /*
    TRIGGER TABELA ITEM_RESERVA */

    CREATE OR REPLACE FUNCTION T_VALIDACAO_ITEM_DA_RESERVA()
    RETURNS TRIGGER AS $$
    DECLARE
    VALOR_TRAJETO NUMERIC(10,2);
    VALOR_CLASSE NUMERIC(10,2);
    BEGIN
        IF EXISTS (SELECT 1 FROM ITEM_RESERVA WHERE CPF_PASSAGEIRO = NEW.CPF_PASSAGEIRO AND (ID_RESERVA = NEW.ID_RESERVA AND ID_VOO = NEW.ID_VOO)) THEN
            RAISE EXCEPTION 'Não é possiVel assoCiar o CPF % a mais de 1 assenTo no mesmo Voo', NEW.CPF_PASSAGEIRO;
        END IF;

        IF EXISTS (SELECT 1 FROM AVIAO_ASSENTO_CLASSE_VOO WHERE ID_AVIAO_ASSENTO_CLASSE_VOO = NEW.ID_AVIAO_ASSENTO_CLASSE_VOO AND STATUS = TRUE) THEN   
            RAISE EXCEPTION 'Não foi possíVel reserVar o assenTo, pois esTá oCupado.';
        END IF;

        UPDATE AVIAO_ASSENTO_CLASSE_VOO
        SET STATUS = TRUE 
        WHERE ID_AVIAO_ASSENTO_CLASSE_VOO = NEW.ID_AVIAO_ASSENTO_CLASSE_VOO;

        SELECT T.VALOR_TRAJETO INTO VALOR_TRAJETO
        FROM TRAJETO T
        JOIN VOO V ON T.ID_TRAJETO = V.ID_TRAJETO
        WHERE V.ID_VOO = NEW.ID_VOO;
        
        SELECT C.VALOR INTO VALOR_CLASSE
        FROM CLASSE C
        JOIN AVIAO_ASSENTO_CLASSE_VOO AAC ON AAC.ID_CLASSE = C.ID_CLASSE
        WHERE AAC.ID_AVIAO_ASSENTO_CLASSE_VOO = NEW.ID_AVIAO_ASSENTO_CLASSE_VOO;

        NEW.VALOR := VALOR_TRAJETO + VALOR_CLASSE;

        UPDATE RESERVA
        SET VALOR_TOTAL_RESERVA = (
            SELECT COALESCE(SUM(I.VALOR), 0)
            FROM ITEM_RESERVA I
            WHERE I.ID_RESERVA = NEW.ID_RESERVA
        )
        WHERE ID_RESERVA = NEW.ID_RESERVA;

            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;

    CREATE OR REPLACE TRIGGER TRIGGER_VALIDACAO_ITEM_DA_RESERVA BEFORE INSERT OR UPDATE ON ITEM_RESERVA FOR EACH ROW EXECUTE PROCEDURE T_VALIDACAO_ITEM_DA_RESERVA();
    
    /*
    TRIGGER TABELA TRAJETO
    */

    CREATE OR REPLACE FUNCTION T_VALIDACAO_TRAJETO()
    RETURNS TRIGGER AS $$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM CUSTO_KM WHERE KM >= NEW.DISTANCIA_KM) THEN
            RAISE EXCEPTION 'A Companhia não realiza Voo para a disTânCia espeCifiCada';
        END IF;

        NEW.VALOR_TRAJETO := NEW.DISTANCIA_KM * (
            SELECT VALOR
            FROM CUSTO_KM
            WHERE KM = (
                SELECT MIN(KM)
                FROM CUSTO_KM
                WHERE KM >= NEW.DISTANCIA_KM
            )
        );

        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;


    CREATE OR REPLACE TRIGGER TRIGGER_VALIDACAO_TRAJETO
    BEFORE INSERT OR UPDATE ON TRAJETO
    FOR EACH ROW
    EXECUTE FUNCTION T_VALIDACAO_TRAJETO();

    /*TRIGGER PARA A TABELA DE CUSTO: NÃO PERMITIR O CADASTRO DE UM KM JÁ EXISTENTE */

    CREATE OR REPLACE FUNCTION T_VALIDACAO_CUSTO_KM()
    RETURNS TRIGGER AS $$
    BEGIN
        IF EXISTS (SELECT 1 FROM CUSTO_KM WHERE KM = NEW.KM AND ID_CUSTO_KM <> NEW.ID_CUSTO_KM) THEN
            RAISE EXCEPTION 'A QUILOMETRAGEM JÁ EXISTE';
        END IF;
        
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;

    CREATE OR REPLACE TRIGGER TRIGGER_VALIDACAO_CUSTO_KM
    BEFORE INSERT OR UPDATE ON CUSTO_KM
    FOR EACH ROW
    EXECUTE FUNCTION T_VALIDACAO_CUSTO_KM();

        
    /*TRIGGER PARA BLOQUEAR CANCELAMENTO DA RESERVA SE O VOO ESTIVER EM ANDAMENTO OU REALIZADO (STATUS: TRUE)*/
    