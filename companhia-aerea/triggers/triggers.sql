-- Triggers
/*
 ========================================
 ||                                    ||
 ||   Trigger para Validar Usuário     ||
 ||                                    ||
 ========================================
 */

CREATE OR REPLACE FUNCTION T_VALIDACAO_USUARIO()
RETURNS TRIGGER AS $$
BEGIN 
    IF NOT VALIDAR_EMAIL(NEW.EMAIL) THEN RAISE EXCEPTION 'E-MAIL % É INVALIDO.', NEW.EMAIL;
    END IF;

    IF NOT VALIDAR_TELEFONE(NEW.TELEFONE) THEN RAISE EXCEPTION 'TELEFONE % É INVÁLIDO', NEW.TELEFONE;
    END IF;

    IF NOT VALIDAR_CPF(NEW.CPF) THEN RAISE EXCEPTION 'CPF % É INVÁLIDO.', NEW.CPF;
    END IF;

    IF (NEW.CPF IS NULL OR NEW.NOME IS NULL OR NEW.DT_NASC IS NULL OR NEW.EMAIL IS NULL OR NEW.ENDERECO IS NULL OR NEW.TELEFONE IS NULL) THEN 
    RAISE EXCEPTION 'Valores nulos';
    END IF;

RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER TRIGGER_VALIDACAO_USUARIO 
BEFORE INSERT OR UPDATE ON USUARIO FOR EACH ROW EXECUTE PROCEDURE T_VALIDACAO_USUARIO();

/*
 ========================================
 ||                                    ||
 ||Trigger para Validar Item da Reserva||
 ||                                    ||
 ========================================
 */

CREATE OR REPLACE FUNCTION T_VALIDACAO_ITEM_DA_RESERVA() 
RETURNS TRIGGER AS $$ 
DECLARE VALOR_TRAJETO NUMERIC(10, 2);
VALOR_CLASSE NUMERIC(10, 2);
BEGIN 
    PERFORM VALIDAR_CPF(NEW.CPF_PASSAGEIRO);

    IF EXISTS (SELECT 1 FROM ITEM_RESERVA WHERE CPF_PASSAGEIRO = NEW.CPF_PASSAGEIRO AND (ID_RESERVA = NEW.ID_RESERVA AND ID_VOO = NEW.ID_VOO)) THEN
    RAISE EXCEPTION 'NÃO É POSSÍVEL ASSOCIAR 1 CPF A MAIS DE 1 ASSENTO DE UM MESMO VOO', NEW.CPF_PASSAGEIRO;
    END IF;

    IF EXISTS (SELECT 1 FROM AVIAO_ASSENTO_CLASSE_VOO WHERE ID_AVIAO_ASSENTO_CLASSE_VOO = NEW.ID_AVIAO_ASSENTO_CLASSE_VOO AND ( ID_VOO = NEW.ID_VOO AND STATUS = TRUE)) THEN
    RAISE EXCEPTION 'NÃO FOI POSSÍVEL RESERVAR O ASSENTO, POIS ESTÁ OCUPADO';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM AVIAO_ASSENTO_CLASSE_VOO WHERE ID_VOO = NEW.ID_VOO) THEN
    RAISE EXCEPTION 'NÃO FOI POSSÍVEL RESERVAR, POIS O VOO % ESPECIFICADO NÃO EXISTE', NEW.ID_VOO;
    END IF;

    IF (NEW.ID_RESERVA IS NULL OR NEW.ID_VOO IS NULL OR NEW.ID_AVIAO_ASSENTO_CLASSE_VOO IS NULL OR NEW.NOME_PASSAGEIRO IS NULL OR NEW.CPF_PASSAGEIRO IS NULL) THEN
    RAISE EXCEPTION 'Valores nulos';
    END IF;

    SELECT T.VALOR_TRAJETO INTO VALOR_TRAJETO FROM TRAJETO T
    JOIN VOO V ON T.ID_TRAJETO = V.ID_TRAJETO
    WHERE
    V.ID_VOO = NEW.ID_VOO;

    SELECT C.VALOR
    INTO VALOR_CLASSE
    FROM   CLASSE C
    JOIN AVIAO_ASSENTO_CLASSE_VOO AAC ON AAC.ID_CLASSE = C.ID_CLASSE
    WHERE AAC.ID_AVIAO_ASSENTO_CLASSE_VOO = NEW.ID_AVIAO_ASSENTO_CLASSE_VOO;

    NEW.VALOR := VALOR_TRAJETO + VALOR_CLASSE;

RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE
OR REPLACE TRIGGER TRIGGER_VALIDACAO_ITEM_DA_RESERVA BEFORE
INSERT OR UPDATE ON ITEM_RESERVA FOR EACH ROW EXECUTE PROCEDURE T_VALIDACAO_ITEM_DA_RESERVA();

/*
 ========================================
 ||        Trigger para Atualizar        ||
 ||          Status do Assento           ||
 ||           Após a Reserva             ||
 ========================================
 */

CREATE OR REPLACE FUNCTION T_ATUALIZAR_STATUS_DO_ASSENTO()
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
    UPDATE AVIAO_ASSENTO_CLASSE_VOO SET STATUS = TRUE WHERE ID_AVIAO_ASSENTO_CLASSE_VOO = NEW.ID_AVIAO_ASSENTO_CLASSE_VOO;
    RETURN NEW;
    END IF;

    IF (TG_OP = 'DELETE') THEN
    UPDATE AVIAO_ASSENTO_CLASSE_VOO SET STATUS = FALSE WHERE ID_AVIAO_ASSENTO_CLASSE_VOO = OLD.ID_AVIAO_ASSENTO_CLASSE_VOO;
     RETURN NULL;
    END IF;
RETURN NULL;
END;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE TRIGGER TRIGGER_ATUALIZACAO_STATUS_DO_ASSENTO AFTER
INSERT OR UPDATE OR DELETE ON ITEM_RESERVA FOR EACH ROW EXECUTE PROCEDURE T_ATUALIZAR_STATUS_DO_ASSENTO();

/*
 ========================================
 ||                                      ||
 ||        Trigger para Atualizar        ||
 ||        Valor Total da Reserva        ||
 ||                                      ||
 ========================================
 */

CREATE OR REPLACE FUNCTION T_ATUALIZAR_VALOR_TOTAL_DA_RESERVA()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE RESERVA
    SET VALOR_TOTAL_RESERVA = (SELECT COALESCE(SUM(I.VALOR), 0)
    FROM ITEM_RESERVA I
    WHERE I.ID_RESERVA = NEW.ID_RESERVA)
    WHERE ID_RESERVA = NEW.ID_RESERVA;
RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER TRIGGER_ATUALIZACAO_VALOR_TOTAL_DA_RESERVA 
AFTER INSERT OR UPDATE OR DELETE ON ITEM_RESERVA FOR EACH ROW EXECUTE PROCEDURE T_ATUALIZAR_VALOR_TOTAL_DA_RESERVA();


/*
 ========================================
 ||                                      ||
 ||        Trigger para Validar          ||
 ||               Reserva                ||
 ||                                      ||
 ========================================
 */
CREATE OR REPLACE FUNCTION T_VALIDACAO_RESERVA()
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
        IF (NEW.ID_USUARIO IS NULL OR NEW.DATA_RESERVA IS NULL) THEN
            RAISE EXCEPTION 'Valores nulos';
        END IF;
    END IF;

    UPDATE RESERVA
    SET NEW.VALOR_TOTAL_RESERVA = (SELECT COALESCE(SUM(I.VALOR), 0)
    FROM ITEM_RESERVA I
    WHERE I.ID_RESERVA = NEW.ID_RESERVA)
    WHERE ID_RESERVA = NEW.ID_RESERVA;
RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER TRIGGER_ATUALIZACAO_VALOR_TOTAL_DA_RESERVA 
AFTER INSERT OR UPDATE OR DELETE ON ITEM_RESERVA FOR EACH ROW EXECUTE PROCEDURE T_ATUALIZAR_VALOR_TOTAL_DA_RESERVA();


/*
 ========================================
 ||                                    ||
 ||   Trigger para Validar Trajeto     ||
 ||                                    ||
 ========================================
 */

CREATE OR REPLACE FUNCTION T_VALIDACAO_TRAJETO()
RETURNS TRIGGER AS $$
BEGIN 
    IF NOT EXISTS (SELECT 1 FROM CUSTO_KM WHERE KM >= NEW.DISTANCIA_KM) THEN 
    RAISE EXCEPTION 'A Companhia não realiza voo para a distância especificada';
END IF;

NEW.VALOR_TRAJETO := NEW.DISTANCIA_KM * (
    SELECT VALOR FROM CUSTO_KM WHERE KM = ( SELECT MIN(KM) FROM CUSTO_KM WHERE KM >= NEW.DISTANCIA_KM));

RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER TRIGGER_VALIDACAO_TRAJETO 
BEFORE INSERT OR UPDATE ON TRAJETO FOR EACH ROW EXECUTE FUNCTION T_VALIDACAO_TRAJETO();

/*
 ========================================
 ||                                    ||
 ||   Trigger para Validar Custo       ||
 ||                                    ||
 ========================================
 */

CREATE OR REPLACE FUNCTION T_VALIDACAO_CUSTO_KM() 
RETURNS TRIGGER AS $$ 
BEGIN 
    IF EXISTS (SELECT 1 FROM CUSTO_KM WHERE KM = NEW.KM AND ID_CUSTO_KM <> NEW.ID_CUSTO_KM) THEN
    RAISE EXCEPTION 'A QUILOMETRAGEM JÁ EXISTE';
END IF;

RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER TRIGGER_VALIDACAO_CUSTO_KM 
BEFORE INSERT OR UPDATE ON CUSTO_KM FOR EACH ROW EXECUTE FUNCTION T_VALIDACAO_CUSTO_KM();

/*
 ========================================
 ||                                    ||
 ||     Trigger para Validar AACV      ||
 ||                                    ||
 ========================================
 */

CREATE OR REPLACE FUNCTION T_VALIDACAO_AACV()
RETURNS TRIGGER AS $$
BEGIN
    DECLARE
        V_CAPACIDADE INTEGER;
        V_QTD_ASSENTOS INTEGER;
    BEGIN

        SELECT CAPACIDADE INTO V_CAPACIDADE
        FROM AVIAO
        WHERE ID_AVIAO = NEW.ID_AVIAO AND ID_VOO = NEW.ID_VOO;

        SELECT COUNT(*) + 1 INTO V_QTD_ASSENTOS
        FROM AVIAO_ASSENTO_CLASSE_VOO
        WHERE ID_AVIAO = NEW.ID_AVIAO;

        IF V_QTD_ASSENTOS > V_CAPACIDADE THEN
            RAISE EXCEPTION 'Não é possível adicionar. Capacidade máxima já atingida!';
        END IF;
    END;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE
OR REPLACE TRIGGER TRIGGER_VALIDACAO_AACV BEFORE
INSERT OR UPDATE
ON AVIAO_ASSENTO_CLASSE_VOO FOR EACH ROW EXECUTE FUNCTION T_VALIDACAO_AACV();


/*
 ========================================
 ||                                    ||
 ||     Trigger para Bloqueio de       ||
 ||     Cancelamento de reserva        ||
 ||                                    ||
 ========================================
 */
CREATE OR REPLACE FUNCTION T_BLOQUEIO_CANCELAMENTO_RESERVA()
RETURNS TRIGGER AS $$
DECLARE 
    DATA_VOO_MINIMA DATE;
BEGIN
    SELECT MIN(A.DATA_VOO) INTO DATA_VOO_MINIMA 
    FROM AVIAO A 
    JOIN ITEM_RESERVA IR ON A.ID_VOO = IR.ID_VOO
    JOIN RESERVA R ON IR.ID_RESERVA = R.ID_RESERVA 
    WHERE IR.ID_RESERVA = OLD.ID_RESERVA; 

    IF (DATA_VOO_MINIMA < CURRENT_DATE) THEN 
        RAISE EXCEPTION 'NÃO É POSSÍVEL CANCELAR UMA RESERVA QUE POSSUEM VOOS ASSOCIADOS QUE JÁ FORAM REALIZADOS';
    END IF;

    RETURN OLD;  
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER T_BLOQUEIO_CANCELAMENTO_RESERVA 
BEFORE DELETE ON RESERVA 
FOR EACH ROW EXECUTE PROCEDURE T_BLOQUEIO_CANCELAMENTO_RESERVA();

/*
 ========================================
 ||                                    ||
 ||     Trigger para Bloqueio de       ||
 ||     Cancelamento de reserva        ||
 ||                                    ||
 ========================================
 */
CREATE OR REPLACE FUNCTION T_BLOQUEIO_CANCELAMENTO_ITEM_RESERVA()
RETURNS TRIGGER AS $$
DECLARE 
    DATA_VOO_MINIMA DATE;
BEGIN
    SELECT MIN(A.DATA_VOO) INTO DATA_VOO_MINIMA 
    FROM AVIAO A 
    JOIN ITEM_RESERVA IR ON A.ID_VOO = IR.ID_VOO
    WHERE IR.ITEM_RESERVA = OLD.ITEM_RESERVA;  

    IF (DATA_VOO_MINIMA < CURRENT_DATE) THEN 
        RAISE EXCEPTION 'NÃO É POSSÍVEL CANCELAR UMA RESERVA QUE POSSUEM VOOS ASSOCIADOS QUE JÁ FORAM REALIZADOS';
    END IF;

    RETURN OLD;  
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER T_BLOQUEIO_CANCELAMENTO_ITEM_RESERVA 
BEFORE DELETE ON ITEM_RESERVA 
FOR EACH ROW EXECUTE PROCEDURE T_BLOQUEIO_CANCELAMENTO_ITEM_RESERVA();

